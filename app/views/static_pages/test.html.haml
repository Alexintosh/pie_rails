- provide(:title, 'Test Metamask')
%script{:src => "https://cdn.jsdelivr.net/npm/@portis/web3@2.0.0-beta.54/umd/index.js", :integrity => "sha256-pPwrJF/X2v9erIHBoY3ZWb4P/cRx3j3/zyvQvycabs0=", :crossorigin => 'anonymous'}
= render 'layouts/pie_header'
.c_customer.afclr
  .wrapper
    .re_main.afclr
      .ab_head.afclr
        %h1 Test Metamask
        = button_to 'Connect!', '#', :id => 'btn_connect', :class => 'btn btn-primary', :onclick => 'showPortis(); return false;'
:javascript
  $(document).ready(function(e) {
    const ganache = {
      nodeUrl: 'https://mainnet.infura.io/v3/bfe3afaffb0f41938fbf81761d32828d',
      chainId: 1
    };
    
    const portis = new Portis('9d29d798-81ea-45ff-b88b-0bf97fb207be', ganache);
    const web3 = new Web3(portis.provider);
    
    //portis.showPortis();
    
    web3.eth.getAccounts((error, accounts) => {
      alert("Got account: " + accounts[0]);      
    });
    //portis.onActiveWalletChanged(walletAddress => {
      //alert('Active wallet address:', walletAddress);
    //});    
  });
  
  function showPortis() {
    portis.showPortis();
  }
-#
  :javascript
    /*async function getAccount() {
      const accounts = await ethereum.enable();
      const account = accounts[0];
      alert(account);
      //showAccount.innerHTML = account;
    };*/
    function connect_to_mm() {
        const accounts = ethereum.enable();
        const account = accounts[0];
        alert(account);
    }
    
    $(document).ready(function(e) {
      /*if (typeof web3 !== 'undefined') {
         web3 = new Web3(web3.currentProvider);
         web3.eth.defaultAccount = web3.eth.accounts[0];
         alert(web3.eth.defaultAccount);
      }*/
  
      if (typeof window.ethereum !== 'undefined') {
        // Ethereum user detected. You can now use the provider.
        const provider = window['ethereum'];
        alert("We have a provider! "+ ethereum.networkVersion); // 42 for Kovan
        //alert("Address: " + ethereum.selectedAddress);
        web3 = new Web3(web3.currentProvider);
        //web3.eth.defaultAccount = web3.eth.accounts[0];
        //alert(web3.eth.defaultAccount);
        //const accounts = ethereum.enable();
        //const account = accounts[0];
        //alert(account);
        web3.eth.getAccounts().then(console.log);
      }
      else {
          alert("No Ethereum provider!")
      }
  });