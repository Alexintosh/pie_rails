%table.table.striped-table
  %tr
    %th %
    %th Coin
    %th Amount
  - pool_config.each do |pc|
    %tr
      %td{:title => pc[:denorm]}= pc[:weight]
      %td= pc[:coin]
      %td= number_with_delimiter(pc[:amount].round(2))
%hr
- if !pool.bp_address.nil?
  = link_to 'Create Balancer', '#', :class => 'btn btn-primary', :onclick => 'createBalancer("#{pool_config.to_json}", "#{client_address}");'
- else
  = link_to 'Balancer Created', '#', :style => 'pointer-events: none;', :title => "Contract address: #{pool.bp_address}", :class => 'btn btn-primary'
  %br
  %br
  %p
    = link_to 'Click here', pool.balancer_url, :target => '_blank'
    to see it live!
:javascript
  var provider = null;
  
  // We have the transforms array, where each
  //   element has method, src, dest, amount
  async function createBalancer(pool, client_address) {
      web3 = new Web3(web3.currentProvider);
      provider = new ethers.providers.Web3Provider(web3.currentProvider);
      
      try {
          const bFactory = new ethers.Contract('#{BFACTORY}',
                                               JSON.parse('#{BFACTORY_ABI.html_safe}'),
                                               provider.getSigner(0));
          
          // Get address of new pool
          const bpAddress = await bFactory.newBPool();
          
          // Now get a reference to the contract
          const bPool = new ethers.Contract(bpAddress,
                                            JSON.parse('#{BPOOL_ABI.html_safe}'),
                                            provider.getSigner(0));
          
          for (const bind of JSON.parse(pool_config)) {
              // Approve token
              var abi = $('#' + bind.coin + '_abi').val();
              
              // Approve each slice
              const slice = new ethers.Contract(bind.coin_addr,
                                                JSON.parse(abi),
                                                provider.getSigner(0));                                                            
              await slice.approve(bpAddress, bind.amount_wei);
              
              await bPool.bind(bind.coin_addr, bind.amount_wei, bind.denorm);
          };
              
          // Set fee and enable trading!
          await bPool.setSwapFee(web3.utils.toWei('#{BALANCER_SWAP_FEE}'));
          await bPool.setPublicSwap(true);
      }
      catch(err) {
          alert(err);
      }      
  }
