- provide(:title, t('balancer_pool'))
= javascript_include_tag "https://code.highcharts.com/highcharts.js"
= javascript_include_tag "https://code.highcharts.com/modules/data.js"
= javascript_include_tag "https://code.highcharts.com/modules/drilldown.js"
%script{:src => "https://cdn.ethers.io/scripts/ethers-v4.min.js", :charset => "utf-8", :type => "text/javascript"}
</script>
= render 'layouts/pie_header'
.page-container
  .c_customer.afclr
    .wrapper
      .re_main.afclr
        .ab_head.afclr
          %h1= t('create_balancer')
        .in_iner_pag.afclr
          = hidden_field_tag :has_chart, !@chart_data.nil?
          .row
            .col-md-5
              #coin_balances
                -#{:style => 'display:none'}
                = form_with :url => balancer_pool_path, :method => :put, :data => {:remote => false} do |f|
                  #coin_table
                    = t('getting_balances')
                    %br
                    = image_tag 'loading.gif', :style => 'width:200px', :id => 'loading_gif'
                    %br
                    %br
                  = f.submit t('calculate'), :class => 'btn btn-primary'
              = link_to 'Connect wallet', '#', :class => 'btn btn-primary', :id => 'connect_wallet', :onclick => "loadWallet();"
            .col-md-7
              - if @chart_data.nil?
                - unless @errors.nil? or 0 == @errors.count
                  %p= t('sorry', :errors => pluralize(@errors.count, 'error'))
                  .alert.alert-danger{:style => 'width:420px'}
                    %ul
                      - @errors.each do |error|
                        - if error.has_key?(:coin)
                          %li= t('need_ptoken', :token => error[:coin])
                          %ol{:style => 'padding-left:50px'}
                            %li{:style => 'font-size:11pt'}= t('trust_me', :amount => error[:amount].round(4), :address => error[:address])
                            %li{:style => 'font-size:11pt'}= link_to t('go_ptokens'), BalancerPool::PTOKENS_URL, :target => '_blank'
                        - else
                          %li= error[:msg]
              - else
                %div{:style => 'margin-left:-200px'}
                  = form_with :url => balancer_pools_path, :data => {:remote => false} do |f|
                    = hidden_field_tag "pool_id", @pool.id
                    %figure.highcharts-figure
                      #my_plan
                        %p.highcharts-description
                          The Pie chart with the plan!
                    %center= f.submit t('create_pool'), :class => 'btn btn-primary'
:javascript
  $(document).ready(function(e) { 
    var ethereum_address = null;
    var provider = null;
    
    /*if (typeof window.ethereum !== 'undefined') { 
      ethereum.on('accountsChanged', function (accounts) {
        alert("Changed: " + accounts[0]);
        // Time to reload your interface with accounts[0]!
        if (ethereum_address != null && accounts[0] != ethereum_address) {
          alert("Switched accounts: '" + accounts[0] + "'");
        }
        
        ethereum_address = accounts[0];
      });
    }*/
                  
    var has_chart = $('#has_chart').val();
     
    if ('true' == has_chart) {
      Highcharts.chart('my_plan', #{@chart_data});
    }     
    // Get coin balances
    var data = {'address':'0x204012635024A578Ac60ce97A821c36F691beA85',
                'network':1,
                'pool_id':#{@pool.id},
                'coins': {'ETH':10, 'USDC':2000, 'USDT': 3000, 'DAI':3000, 'BAT':500, 'KICK':888888, 'pBTC':0.2, 'cDAI':17432}};
    
    jQuery.ajax({url:'#{update_balances_balancer_pool_path(@pool)}.js',
                 data: data,
                 type: "PUT",
                 success: function(data) { $('#coin_table').html(data); },
                 error: function() { alert('Oh noes!'); }, 
                 async: false});
  });
  
  function loadWallet() {
    getAccount();
  }
  
  async function getBalances(account, provider) {
    const ethBalance = await web3.eth.getBalance(account);
    alert("ETH balance: " + web3.utils.fromWei(ethBalance, 'ether'));
    var usdcContractAddress = '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48';
    var usdcAbi = '[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_account","type":"address"}],"name":"unBlacklist","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"minter","type":"address"}],"name":"removeMinter","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_symbol","type":"string"},{"name":"_currency","type":"string"},{"name":"_decimals","type":"uint8"},{"name":"_masterMinter","type":"address"},{"name":"_pauser","type":"address"},{"name":"_blacklister","type":"address"},{"name":"_owner","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"masterMinter","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"mint","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"minter","type":"address"},{"name":"minterAllowedAmount","type":"uint256"}],"name":"configureMinter","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_newPauser","type":"address"}],"name":"updatePauser","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"paused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"account","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"minter","type":"address"}],"name":"minterAllowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"pauser","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_newMasterMinter","type":"address"}],"name":"updateMasterMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"account","type":"address"}],"name":"isMinter","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newBlacklister","type":"address"}],"name":"updateBlacklister","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"blacklister","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"currency","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_account","type":"address"}],"name":"blacklist","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_account","type":"address"}],"name":"isBlacklisted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"minter","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"burner","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"minter","type":"address"},{"indexed":false,"name":"minterAllowedAmount","type":"uint256"}],"name":"MinterConfigured","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"oldMinter","type":"address"}],"name":"MinterRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"newMasterMinter","type":"address"}],"name":"MasterMinterChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_account","type":"address"}],"name":"Blacklisted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_account","type":"address"}],"name":"UnBlacklisted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"newBlacklister","type":"address"}],"name":"BlacklisterChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"Pause","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpause","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"newAddress","type":"address"}],"name":"PauserChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"previousOwner","type":"address"},{"indexed":false,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}]';
    var usdc = new ethers.Contract(usdcContractAddress,
                                   JSON.parse(usdcAbi),
                                   provider.getSigner(0));
    var balance = await usdc.balanceOf(account);
    alert("USDC balance: " + balance / 1000000); // web3.utils.fromWei(balance.toNumber(), 'szabo'));
  }
  
  async function getAccount() {
    const accounts = await ethereum.enable();
    // new api unsupported, apparently
    //const accounts = await ethereum.send('eth_requestAccounts');
    
    const account = accounts[0];
    alert("Found account! " + account);
    $('#connect_wallet').hide();
    web3 = new Web3(web3.currentProvider);
    provider = new ethers.providers.Web3Provider(web3.currentProvider);
    
    // ENS
    provider.lookupAddress('0xBEf33200077A2A2AC3613aB92488b41FFc39AcE2').then(function(address) {
      alert("Hello, " + address);
    });
    getBalances(account, provider);
  }
