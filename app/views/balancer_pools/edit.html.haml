- provide(:title, t('balancer_pool'))
= javascript_include_tag "https://code.highcharts.com/highcharts.js"
= javascript_include_tag "https://code.highcharts.com/modules/data.js"
= javascript_include_tag "https://code.highcharts.com/modules/drilldown.js"
%script{:src => "https://cdn.ethers.io/scripts/ethers-v4.min.js", :charset => "utf-8", :type => "text/javascript"}
%script{:src => "https://cdn.jsdelivr.net/npm/@portis/web3@2.0.0-beta.54/umd/index.js", :integrity => "sha256-pPwrJF/X2v9erIHBoY3ZWb4P/cRx3j3/zyvQvycabs0=", :crossorigin => 'anonymous'}
= render 'layouts/pie_header'
.page-container
  .c_customer.afclr
    .wrapper
      .re_main.afclr
        .ab_head.afclr
          %h1= t('design_balancer')
          %p= t('design_instructions')
        .in_iner_pag.afclr
          = hidden_field_tag :has_chart, !@chart_data.nil?
          = hidden_field_tag :has_table, !@balance_table.nil?
          = hidden_field_tag :has_connection, !@address.nil?
          = hidden_field_tag :show_address, !@address.nil? && @ens_name.nil?
          = hidden_field_tag :show_ens_name, !@ens_name.nil?
          = hidden_field_tag :show_ens_avatar, !@ens_avatar.nil?
          = hidden_field_tag :need_btc_address, @need_btc_address
          .row
            .col-md-5
              #address_block{:style => 'display:none'}
                #eth_address{:style => 'font-size:10pt'}
              #ens_block{:style => 'display:none'}
                = image_tag 'ens.png', :style => 'width:30px'
                %em#ens_name
                #avatar
              #no_balances
              #coin_balances{:style => 'display:none'}
                = form_with :url => balancer_pool_path, :method => :put, :data => {:remote => false} do |f|
                  #coin_table
                    = t('getting_balances')
                    %br
                    = image_tag 'loading.gif', :style => 'width:200px', :id => 'loading_gif'
                    %br
                    %br
                  = f.submit t('calculate'), :class => 'btn btn-primary'
              #connection_block
                %p#connection_status
                  No connection
                = button_to '#', :title => t('metamask_blurb'), :class => 'btn btn-link', :id => 'connect_metamask', :onclick => "loadWallet('Metamask'); return false;" do
                  = image_tag('metamask-fox.svg')
                  Connect Metamask
                = button_to '#', :title => t('portis_blurb'), :class => 'btn btn-link', :id => 'connect_portis', :onclick => "loadWallet('Portis'); return false;" do
                  = image_tag('portis-logo.jpg', :style => 'width:40px')
                  Connect Portis
                #show_portis{:style => 'display:none'}
                  = link_to 'Show Portis', '#', :class => 'btn btn-secondary', :id => 'show_portis', :onclick => "portis.showPortis(); return false;"
            .col-md-7
              - if @chart_data.nil?
                - unless @errors.nil? or 0 == @errors.count
                  %p= t('sorry', :errors => pluralize(@errors.count, 'error'))
                  .alert.alert-danger{:style => 'width:420px'}
                    %ul
                      - @errors.each do |error|
                        - if error.has_key?(:coin)
                          %li= t('need_ptoken', :token => error[:coin])
                          %ol
                            %li{:style => 'font-size:11pt'}
                              = t('trust_me', :amount => error[:amount].round(4))
                              #btc_address
                            %li{:style => 'font-size:11pt'}= link_to t('go_ptokens'), BalancerPool::PTOKENS_URL, :target => '_blank'
                        - else
                          %li= error[:msg]
              - else
                %div{:style => 'margin-left:-200px'}
                  = form_with :url => balancer_pools_path, :data => {:remote => false} do |f|
                    = hidden_field_tag "pool_id", @pool.id
                    %figure.highcharts-figure
                      #my_plan
                        %p.highcharts-description
                          The Pie chart with the plan!
                    %center= f.submit t('create_pool'), :class => 'btn btn-primary'
:javascript
  var ethereum_address = null;
  var provider = null;
  var portis = null;
  var ens_name = null;
  var ens_avatar = null;
  var balanceData = {};
  
  $(document).ready(function(e) {     
    // Turn off Metamask if we don't have it
    if (typeof window.ethereum == 'undefined') {
        $('#connect_metamask').attr('disabled', 'disabled');
    }
    else {
        // Probably use this later
        /*ethereum.on('accountsChanged', function (accounts) {
          alert("Changed: " + accounts[0]);
          // Time to reload your interface with accounts[0]!
          if (ethereum_address != null && accounts[0] != ethereum_address) {
            alert("Switched accounts: '" + accounts[0] + "'");
          }
          
          ethereum_address = accounts[0];
        });*/
    }
    
    var has_connection = $('#has_connection').val();
    if ('true' == has_connection) {
        $('#connection_status').text('Connected');
    }
    
    var show_address = $('#show_address').val();
    if ('true' == show_address) {
        $('#eth_address').val('#{@address}');
        $('#address_block').show();
    }
    else {
        var show_name = $('#show_ens_name').val();
        if ('true' == show_name) {
            var show_avatar = $('#show_ens_avatar').val();
            
            $('#address_block').hide();
            $('#ens_name').text('#{@ens_name}');
            if ('true' == show_avatar) {
                $('#avatar').html("<image src='#{@ens_avatar}'/>");
            }
            $('#ens_block').show();
        }
    }
                      
    var has_chart = $('#has_chart').val();
    if ('true' == has_chart) {
      Highcharts.chart('my_plan', #{@chart_data});
    }     

    var has_table = $('#has_table').val();     
    if ('true' == has_table) {
      $('#coin_table').html("#{j(@balance_table)}");
      $('#coin_balances').show();
    }  
      
    var need_btc_address = $('#need_btc_address').val();
    if ('true' == need_btc_address) {
      fillInBTCAddress();
    }
  });

  // Called if we need a pToken (pBTC in this case)
  // Get a BTC deposit address, given an Ethereum address
  // Depending on the path (reload vs first time), we may or may not
  //   have ethereum_address defined. So get it if it's undefined
  //
  async function fillInBTCAddress() {
      var request = new XMLHttpRequest();
      if (null == ethereum_address) {
        const accounts = await ethereum.enable();
        ethereum_address = accounts[0];
      }
      
      request.open('GET', '#{NODE_ENDPOINT}' + ethereum_address, true)
      request.onload = function() {
        if (200 == request.status) {
          var response = JSON.parse(this.response);
          
          $('#btc_address').text(response['nativeDepositAddress']);
        }
        else {
          alert("Could not get deposit address; please use the link to the pTokens DApp");
        }
      }
      
      request.send();         
  }
      
  // Depending on the button they pushed (encoded in the wallet argument)
  // Load the wallet from either Metamask or Portis
  // Set ethereum_address
  // If successful, set all the connection variables, show the address (maybe temporarily),
  //   then call getENS() to look up the address - if found, it will replace the address with
  //   the ENS domain name (and display the avatar, if present)
  // Finally, call loadBalances to retrieve the token balances
  //
  async function loadWallet(wallet) {
    if ('Metamask' == wallet) {
        const accounts = await ethereum.enable();
        ethereum_address = accounts[0];
        web3 = new Web3(web3.currentProvider);
        provider = new ethers.providers.Web3Provider(web3.currentProvider);
        $('#show_portis').hide();
    }
    else if ('Portis' == wallet) {
        portis = new Portis('#{PORTIS_APP_ID}', 'mainnet');
        web3 = new Web3(portis.provider);
        provider = new ethers.providers.Web3Provider(portis.provider);
        web3.eth.getAccounts((error, accounts) => {
          ethereum_address = accounts[0];
          $('#show_portis').show();
        });    
     }
     
     if (ethereum_address) {
         const conn_str = "Connected to " + getNetworkName(ethereum.networkVersion) + " through " + wallet;
         $('#connection_status').text(conn_str);
         $('#connection_status').attr('title', ethereum_address); 
         $('#address_block').show();
         $('#eth_address').text("Address: " + ethereum_address);
         
         getENS(ethereum_address);
         loadBalances(ethereum_address);
      }
  }
  
  async function getENS(ethereum_address) {
    // If it is the ETHGlobal test address, we're running locally;
    //   switch to my endymionjkb.eth account for resolution purposes
    // Otherwise, use the real address (so it will work in production)
    //
    var ens_address = '#{ETH_GLOBAL_ADDRESS}' == ethereum_address ? '#{ENDYMIONJKB_ETH}' : ethereum_address;
    
    provider.lookupAddress(ens_address).then(function(name) {
      ens_name = name;
      $('#address_block').hide();
      $('#ens_name').text(ens_name);
      $('#ens_block').show();
      
      getAvatar(ens_name);
    });
  }
    
  // Get ETH and token balances, given an address
  // CoinInfo.used has the tokens we care about (ignore cDAI and KICK and whatever else we can't use) 
  async function loadBalances(ethereum_address) {
     balanceData = await getBalances(ethereum_address);
     
     if (0 == balanceData.size) {
         $('#no_balances').text("No balances!");
     }
     else {
         // Get coin balances
         var data = {'address':ethereum_address,
                     'network':ethereum.networkVersion,
                     'pool_id':#{@pool.id},
                     'coins': balanceData};
        
         jQuery.ajax({url:'#{update_balances_balancer_pool_path(@pool)}.js',
                      data: data,
                      type: "PUT",
                      success: function(data) { $('#coin_table').html(data); 
                                                $('#coin_balances').show();
                                                $('#connection_block').hide(); },
                      error: function() { alert('Oh noes!'); }, 
                      async: false});
      }
  }
  
  async function getAvatar(ens_name) {
    var ens = new ethers.Contract('#{ENS_PUBLIC_RESOLVER}',
                                  JSON.parse('#{PUBLIC_RESOLVER_ABI.html_safe}'),
                                  provider.getSigner(0));

    // Thank you, ethers! Need to hash the name a certain way, and also convert to Bytes32
    const node = ethers.utils.namehash(ens_name);
    var avatar = await ens.text(node, 'avatar');
    $('#avatar').html("<image src='" + avatar + "'/>");
  }
