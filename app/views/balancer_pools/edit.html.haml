- provide(:title, t('balancer_pool'))
= javascript_include_tag "https://code.highcharts.com/highcharts.js"
= javascript_include_tag "https://code.highcharts.com/modules/data.js"
= javascript_include_tag "https://code.highcharts.com/modules/drilldown.js"
%script{:src => "https://cdn.ethers.io/scripts/ethers-v4.min.js", :charset => "utf-8", :type => "text/javascript"}
%script{:src => "https://cdn.jsdelivr.net/npm/@portis/web3@2.0.0-beta.54/umd/index.js", :integrity => "sha256-pPwrJF/X2v9erIHBoY3ZWb4P/cRx3j3/zyvQvycabs0=", :crossorigin => 'anonymous'}
= render 'layouts/pie_header'
.page-container
  .c_customer.afclr
    .wrapper
      .re_main.afclr
        .ab_head.afclr
          %h1= t('design_balancer')
          %p= t('design_instructions')
        .in_iner_pag.afclr
          = hidden_field_tag :has_chart, !@chart_data.nil?
          = hidden_field_tag :has_table, !@balance_table.nil?
          = hidden_field_tag :has_connection, !@address.nil?
          = hidden_field_tag :show_address, !@address.nil? && @ens_name.nil?
          = hidden_field_tag :show_ens_name, !@ens_name.nil?
          = hidden_field_tag :show_ens_avatar, !@ens_avatar.nil?
          = hidden_field_tag :need_btc_address, @need_btc_address
          .row
            .col-md-5
              #address_block{:style => 'display:none'}
                #eth_address{:style => 'font-size:10pt'}
              #ens_block{:style => 'display:none'}
                = image_tag 'ens.png', :style => 'width:30px'
                %em#ens_name
                #avatar
              #no_balances
              #coin_balances{:style => 'display:none'}
                = form_with :url => balancer_pool_path, :method => :put, :data => {:remote => false} do |f|
                  #coin_table
                    = t('getting_balances')
                    %br
                    = image_tag 'loading.gif', :style => 'width:200px', :id => 'loading_gif'
                    %br
                    %br
                  = f.submit t('calculate'), :class => 'btn btn-primary'
              #connection_block
                %p#connection_status
                  No connection
                = button_to '#', :title => t('metamask_blurb'), :class => 'btn btn-link', :id => 'connect_metamask', :onclick => "loadWallet('Metamask'); return false;" do
                  = image_tag('metamask-fox.svg')
                  Connect Metamask
                = button_to '#', :title => t('portis_blurb'), :class => 'btn btn-link', :id => 'connect_portis', :onclick => "loadWallet('Portis'); return false;" do
                  = image_tag('portis-logo.jpg', :style => 'width:40px')
                  Connect Portis
                #show_portis{:style => 'display:none'}
                  = link_to 'Show Portis', '#', :class => 'btn btn-secondary', :id => 'show_portis', :onclick => "portis.showPortis(); return false;"
            .col-md-7
              - if @chart_data.nil?
                - unless @errors.nil? or 0 == @errors.count
                  %p= t('sorry', :errors => pluralize(@errors.count, 'error'))
                  .alert.alert-danger{:style => 'width:420px'}
                    %ul
                      - @errors.each do |error|
                        - if error.has_key?(:coin)
                          %li= t('need_ptoken', :token => error[:coin])
                          %ol
                            %li{:style => 'font-size:11pt'}
                              = t('trust_me', :amount => error[:amount].round(4))
                              #btc_address
                            %li{:style => 'font-size:11pt'}= link_to t('go_ptokens'), BalancerPool::PTOKENS_URL, :target => '_blank'
                        - else
                          %li= error[:msg]
              - else
                %div{:style => 'margin-left:-200px'}
                  = form_with :url => balancer_pools_path, :data => {:remote => false} do |f|
                    = hidden_field_tag "pool_id", @pool.id
                    %figure.highcharts-figure
                      #my_plan
                        %p.highcharts-description
                          The Pie chart with the plan!
                    %center= f.submit t('create_pool'), :class => 'btn btn-primary'
:javascript
  var ethereum_address = null;
  var provider = null;
  var portis = null;
  var ens_name = null;
  var ens_avatar = null;
  var balanceData = {};
  const ETHGlobalAddress = '0x204012635024A578Ac60ce97A821c36F691beA85';
  const KnownENSAddress = '0xBEf33200077A2A2AC3613aB92488b41FFc39AcE2';
  const NodeEndpoint = 'https://nuc-bridge-3.ngrok.io/pbtc-on-eth/get-native-deposit-address/';
  
  $(document).ready(function(e) {     
    // Turn off Metamask if we don't have it
    if (typeof window.ethereum == 'undefined') {
        $('#connect_metamask').attr('disabled', 'disabled');
    }
    else {
        // Probably use this later
        /*ethereum.on('accountsChanged', function (accounts) {
          alert("Changed: " + accounts[0]);
          // Time to reload your interface with accounts[0]!
          if (ethereum_address != null && accounts[0] != ethereum_address) {
            alert("Switched accounts: '" + accounts[0] + "'");
          }
          
          ethereum_address = accounts[0];
        });*/
    }
    
    var has_connection = $('#has_connection').val();
    if ('true' == has_connection) {
        $('#connection_status').text('Connected');
    }
    
    var show_address = $('#show_address').val();
    if ('true' == show_address) {
        $('#eth_address').val('#{@address}');
        $('#address_block').show();
    }
    else {
        var show_name = $('#show_ens_name').val();
        if ('true' == show_name) {
            var show_avatar = $('#show_ens_avatar').val();
            
            $('#address_block').hide();
            $('#ens_name').text('#{@ens_name}');
            if ('true' == show_avatar) {
                $('#avatar').html("<image src='#{@ens_avatar}'/>");
            }
            $('#ens_block').show();
        }
    }
                      
    var has_chart = $('#has_chart').val();
    if ('true' == has_chart) {
      Highcharts.chart('my_plan', #{@chart_data});
    }     

    var has_table = $('#has_table').val();     
    if ('true' == has_table) {
      $('#coin_table').html("#{j(@balance_table)}");
      $('#coin_balances').show();
    }  
      
    var need_btc_address = $('#need_btc_address').val();
    if ('true' == need_btc_address) {
      fillInBTCAddress();
    }
  });

  async function fillInBTCAddress() {
      var request = new XMLHttpRequest();
      if (null == ethereum_address) {
        const accounts = await ethereum.enable();
        ethereum_address = accounts[0];
      }
      
      request.open('GET', NodeEndpoint + ethereum_address, true)
      request.onload = function() {
        if (200 == request.status) {
          var response = JSON.parse(this.response);
          
          $('#btc_address').text(response['nativeDepositAddress']);
        }
        else {
          alert("Could not get deposit address; please use the link to the pTokens DApp");
        }
      }
      
      request.send();         
  }
      
  async function loadWallet(wallet) {
    if ('Metamask' == wallet) {
        const accounts = await ethereum.enable();
        ethereum_address = accounts[0];
        web3 = new Web3(web3.currentProvider);
        provider = new ethers.providers.Web3Provider(web3.currentProvider);
        $('#show_portis').hide();
    }
    else if ('Portis' == wallet) {
        portis = new Portis('9d29d798-81ea-45ff-b88b-0bf97fb207be', 'mainnet');
        web3 = new Web3(portis.provider);
        provider = new ethers.providers.Web3Provider(portis.provider);
        web3.eth.getAccounts((error, accounts) => {
          ethereum_address = accounts[0];
          $('#show_portis').show();
        });    
     }
     
     if (ethereum_address) {
         const conn_str = "Connected to " + getNetworkName(ethereum.networkVersion) + " through " + wallet;
         $('#connection_status').text(conn_str);
         $('#connection_status').attr('title', ethereum_address); 
         $('#address_block').show();
         $('#eth_address').text("Address: " + ethereum_address);
         
         getENS();
         loadBalances();
      }
  }
  
  async function getENS() {
    // If it is the ETHGlobal test address, we're running locally;
    //   switch to my endymionjkb.eth account for resolution purposes
    // Otherwise, use the real address (so it will work in production)
    //
    var ens_address = ETHGlobalAddress == ethereum_address ? KnownENSAddress : ethereum_address;
    
    provider.lookupAddress(ens_address).then(function(name) {
      ens_name = name;
      $('#address_block').hide();
      $('#ens_name').text(ens_name);
      $('#ens_block').show();
      
      getAvatar();
    });
  }
    
  async function loadBalances() {
     balanceData = await getBalances(ethereum_address);
     
     if (0 == balanceData.size) {
         $('#no_balances').text("No balances!");
     }
     else {
         // Get coin balances
         var data = {'address':ethereum_address,
                     'network':ethereum.networkVersion,
                     'pool_id':#{@pool.id},
                     'coins': balanceData};
        
         jQuery.ajax({url:'#{update_balances_balancer_pool_path(@pool)}.js',
                      data: data,
                      type: "PUT",
                      success: function(data) { $('#coin_table').html(data); 
                                                $('#coin_balances').show();
                                                $('#connection_block').hide(); },
                      error: function() { alert('Oh noes!'); }, 
                      async: false});
      }
  }
  
  async function getAvatar() {
    const resolver_address = '0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41';
    const resolver_abi = '[{"inputs":[{"internalType":"contract ENS","name":"_ens","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"contentType","type":"uint256"}],"name":"ABIChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"a","type":"address"}],"name":"AddrChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"coinType","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"newAddress","type":"bytes"}],"name":"AddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bool","name":"isAuthorised","type":"bool"}],"name":"AuthorisationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"hash","type":"bytes"}],"name":"ContenthashChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"record","type":"bytes"}],"name":"DNSRecordChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"}],"name":"DNSRecordDeleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"DNSZoneCleared","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"bytes4","name":"interfaceID","type":"bytes4"},{"indexed":false,"internalType":"address","name":"implementer","type":"address"}],"name":"InterfaceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"string","name":"name","type":"string"}],"name":"NameChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"x","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"y","type":"bytes32"}],"name":"PubkeyChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"string","name":"indexedKey","type":"string"},{"indexed":false,"internalType":"string","name":"key","type":"string"}],"name":"TextChanged","type":"event"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"contentTypes","type":"uint256"}],"name":"ABI","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"addr","outputs":[{"internalType":"address payable","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"}],"name":"addr","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"authorisations","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"clearDNSZone","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"contenthash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"uint16","name":"resource","type":"uint16"}],"name":"dnsRecord","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"name":"hasDNSRecords","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"interfaceImplementer","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"pubkey","outputs":[{"internalType":"bytes32","name":"x","type":"bytes32"},{"internalType":"bytes32","name":"y","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"contentType","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"setABI","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"},{"internalType":"bytes","name":"a","type":"bytes"}],"name":"setAddr","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"a","type":"address"}],"name":"setAddr","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bool","name":"isAuthorised","type":"bool"}],"name":"setAuthorisation","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"hash","type":"bytes"}],"name":"setContenthash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"setDNSRecords","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes4","name":"interfaceID","type":"bytes4"},{"internalType":"address","name":"implementer","type":"address"}],"name":"setInterface","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"name","type":"string"}],"name":"setName","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"x","type":"bytes32"},{"internalType":"bytes32","name":"y","type":"bytes32"}],"name":"setPubkey","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"key","type":"string"},{"internalType":"string","name":"value","type":"string"}],"name":"setText","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"key","type":"string"}],"name":"text","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}]'
    var ens = new ethers.Contract(resolver_address,
                                  JSON.parse(resolver_abi),
                                  provider.getSigner(0));
    const node = ethers.utils.namehash(ens_name);
    var avatar = await ens.text(node, 'avatar');
    $('#avatar').html("<image src='" + avatar + "'/>");
  }
